#user   nginx;
worker_processes    2;

#error_log  logs/error.log  error;
error_log   logs/error.log  debug;
#error_log tyd_log:size=65536,max_record=1024,connect_to=unix:/tmp/logd.sock,expire=1000ms debug;

#pid    logs/nginx.pid;

# for unix socket log directive
#pod_name POD_NAME;

events {
    worker_connections  1024;
}

http {
    lua_package_path ';;$prefix/cfg/?.lua;$prefix/open/?.lua';

    server {
        listen 8525;
#       server_name localhost;

#       status page for all the peers:
        location = /pushMsg {
            access_log off;
#           allow 10.0.10.213;
#           allow 127.0.0.1;
#           deny all;

            rewrite_by_lua_block {
                ngx.req.read_body()
            }

            default_type text/plain;
            content_by_lua_block { 
                local redis     = require("resty.redis")
                local cjson     = require("cjson")
                local common    = require('common')
                local config    = require('config')

                local args
                if 'POST' == ngx.req.get_method() then
                    -- args = ngx.req.get_post_args()
                    args = ngx.req.get_body_data()
                    args = cjson.decode(args)
                elseif 'GET' == ngx.req.get_method() then
                    args = ngx.req.get_uri_args()
                end

                ngx.log(ngx.DEBUG, cjson.encode(args))
                if not args then
                    ngx.log(ngx.ERR, 'get args error or args is empty!')
                    ngx.say(common.resp(config.errnu.PARAM_ERROR))
                    return
                end

                local red = redis.new()
                local ok, err = red:connect(config.redis.host, config.redis.port)
                if not ok then
                    ngx.log(ngx.ERR, 'fail to connect: ' .. err)
                    ngx.say(common.resp(config.errnu.REDIS_CONNECT_ERROR))
                    return
                end

                --[[
                if not args.expanded and (args.osType == 1) then
                    local ok, err = red:rpush(config.redis.pushagain, cjson.encode({
                        msgId   = args.msgId,
                        try     = 1,
                        modify  = ngx.now(),
                    }))
                    if not ok then
                        ngx.log(ngx.ERR, 'fail to rpush to again task list: ' .. err)
                        ngx.say(common.resp(config.errnu.REDIS_DO_LPUSH_ERROR))
                        return
                    end
                end
                ]]
                
                if args.regularTime then
                    -- 定时消息
                    local ok, err = red:lpush(config.redis.pushtimer, cjson.encode{
                            msgId   = args.msgId,
                            timer   = args.regularTime,
                            count   = args.count,
                            ostype  = args.osType,
                            expand  = args.expanded,
                        })
                    if not ok then
                        ngx.log(ngx.ERR, 'fail to lpush to task list: ' .. err)
                        ngx.say(common.resp(config.errnu.REDIS_DO_LPUSH_ERROR))
                        return
                    end
                else
                    if args.expanded and (args.osType == 1) then
                        -- 单播消息
                        local ok, err = red:rpush(config.redis.pushagain, cjson.encode({
                            msgId   = args.msgId,
                            try     = 1,
                            modify  = ngx.now(),
                        }))
                        if not ok then
                            ngx.log(ngx.ERR, 'fail to rpush to again task list: ' .. err)
                            ngx.say(common.resp(config.errnu.REDIS_DO_LPUSH_ERROR))
                            return
                        end
                    else
                        if args.count <= 10000 then
                            local ok, err = red:lpush(config.redis.getpri, cjson.encode{
                                    msgId   = args.msgId,
                                    count   = args.count,
                                    ostype  = args.osType,
                                })
                            if not ok then
                                ngx.log(ngx.ERR, 'fail to lpush to task list: ' .. err)
                                ngx.say(common.resp(config.errnu.REDIS_DO_LPUSH_ERROR))
                                return
                            end
                        elseif args.count <= 1000000 then
                            local ok, err = red:lpush(config.redis.getcom, cjson.encode{
                                    msgId   = args.msgId,
                                    count   = args.count,
                                    ostype  = args.osType,
                                })
                            if not ok then
                                ngx.log(ngx.ERR, 'fail to lpush to task list: ' .. err)
                                ngx.say(common.resp(config.errnu.REDIS_DO_LPUSH_ERROR))
                                return
                            end
                        else
                            local ok, err = red:lpush(config.redis.gethug, cjson.encode{
                                    msgId   = args.msgId,
                                    count   = args.count,
                                    ostype  = args.osType,
                                })
                            if not ok then
                                ngx.log(ngx.ERR, 'fail to lpush to task list: ' .. err)
                                ngx.say(common.resp(config.errnu.REDIS_DO_LPUSH_ERROR))
                                return
                            end
                        end
                    end
                end

                red:close()
                ngx.say(common.resp(config.errnu.OK))
            }
        }

        location = /redis_test {
            default_type text/plain;
            content_by_lua_block { 
                local redis     = require("resty.redis")
                local cjson     = require("cjson")
                local common    = require('common')
                local config    = require('config')

                local red = redis.new()
                local ok, err = red:connect(config.redis.host, config.redis.port)
                if not ok then
                    ngx.log(ngx.ERR, 'fail to connect: ' .. err)
                    ngx.say(common.resp(config.errnu.REDIS_CONNECT_ERROR))
                    return
                end

                local ok, err = red:lpush('test', 'ok')
                if not ok then
                    ngx.say(cjson.encode({
                        errCode = -100,
                        errMsg  = "test fail!",
                    }))
                else
                    ngx.say(common.resp(config.errnu.OK))
                end
            }
        }

        location = /pushJobStart {
            access_log off;
            allow 127.0.0.1;
            deny all;

            rewrite_by_lua_block {
                ngx.location.capture_multi{
                    {'/getMsgArray'},
                    {'/pushMsgList'},
                }
            }
        }

        location = /getMsgArray {
            internal;

            content_by_lua_file 'luacode/script_get_deamon.lua';
        }

        location = /pushMsgList {
            internal;
            
#            content_by_lua_file 'luacode/script_push_msg_list.lua';
        }

        location = /pushAgain {
#           access_log off;
#           allow 127.0.0.1;
#           deny all;

            content_by_lua_file 'luacode/api_push_again.lua';
        }
    }
}
